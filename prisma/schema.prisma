// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Tag {
  id         String   @id @default(uuid())
  name       String   @unique
  color      String?
  created_at DateTime @default(now()) // optional: user id/email later

  @@index([name])
  @@map("tags")
}

enum ParticipantStatus {
  complete
  incomplete
}

model Participant {
  id              String            @id @default(uuid())
  name            String
  org_id          String
  role            String?
  contact_info    String?
  rationale       String?
  blocking_issues String?
  status          ParticipantStatus @default(incomplete)
  scheduled_date  DateTime
  created_at      DateTime          @default(now())
  ParticipantRoom ParticipantRoom?

  @@map("participants")
}

model ParticipantRoom {
  id            String   @id @default(cuid())
  participantId String   @unique
  roomId        String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  participant Participant @relation(fields: [participantId], references: [id])

  @@index([participantId])
  @@map("participant_rooms")
}

model Workspace {
  id            String          @id @default(cuid())
  name          String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  WorkspaceRoom WorkspaceRoom[]

  @@map("workspaces")
}

model WorkspaceRoom {
  id          String   @id @default(cuid())
  workspaceId String
  // Liveblocks room id (kept as-is; you can re-use existing rooms)
  roomId      String   @unique
  title       String   @default("Untitled")
  index       Int      @default(0) // ordering in tabs
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId, index])
  @@map("workspace_rooms")
}

model ValuePropositionVersion {
  id             String   @id @default(cuid())
  org_id         String
  room_id        String   @unique
  version_number Int      @default(1)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  @@map("value_proposition_versions")
}

model CardQuestions {
  id               String   @id @default(cuid())
  card_type        CardType
  question         String
  question_options String[]

  @@map("card_questions")
}

enum CardType {
  interview
  feature_idea
}

enum TodoType {
  text
  link
  modal
  image
  video
}

model Todo {
  id                    String   @id @default(cuid())
  org_id                String
  week                  Int
  weekday               String
  weekday_order         Int
  task                  String
  type                  TodoType @default(text)
  task_order            Int      @default(0)
  task_todo             String
  task_todo_description String?
  task_todo_url         String?
  completed             Boolean  @default(false)
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt

  @@map("todos")
}

model TaskList {
  id         Int      @id @default(autoincrement())
  title      String
  order      Int      @default(0)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  Task       Task[]

  @@map("task_lists")
}

model TaskSectionTitle {
  id         Int      @id @default(autoincrement())
  title      String
  order      Int      @default(0)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  Task       Task[]

  @@map("task_section_titles")
}

model Task {
  id               Int      @id @default(autoincrement())
  title            String
  order            Int      @default(0)
  task_list_id     Int
  section_title_id Int
  task_type        TodoType
  task_description String?
  task_url         String?
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt

  task_list     TaskList         @relation(fields: [task_list_id], references: [id], onDelete: Cascade)
  section_title TaskSectionTitle @relation(fields: [section_title_id], references: [id], onDelete: Cascade)
  org_task      OrgTask[]

  @@map("tasks")
}

model OrgTask {
  id         Int      @id @default(autoincrement())
  org_id     String
  task_id    Int
  completed  Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  task       Task     @relation(fields: [task_id], references: [id], onDelete: Cascade)

  @@unique([org_id, task_id])
  @@map("org_tasks")
}
